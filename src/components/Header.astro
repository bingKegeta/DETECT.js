---
import Settings from "./Settings.astro";
import Modal from "./Modal.tsx";
---

<header
  class="flex justify-between bg-base-300 items-center py-2 px-4 text-base-content border-4 border-primary rounded-lg relative min-h-[8vh] md:min-h-[10vh] lg:min-h-[12vh] xl:min-h-[13vh]"
>
  <!-- Logo -->
  <div class="flex flex-col flex-shrink-0">
    <h1 class="font-bold text-4xl">DETECT</h1>
    <span class="text-sm">AAI Solution</span>
  </div>

  <!-- Right-Side Navigation & Settings -->
  <div class="flex items-center gap-6">
    <!-- Navigation Buttons (Adaptive SVG Icons) -->
    <!-- Home Button -->
    <nav class="flex gap-6">
      <a
        href="/"
        class="p-3 transition-transform transform-gpu hover:scale-110"
      >
        <svg
          class="h-[5vh] w-auto fill-current text-base-content hover:text-primary transition-colors duration-300"
          viewBox="0 0 24 24"
        >
          <path d="M12 3L2 12h3v8h6v-6h2v6h6v-8h3z"></path>
        </svg>
      </a>
    </nav>

    <!-- About Button -->
    <button id="about-btn" class="transition-transform hover:scale-110 cursor-pointer text-base-content">
      <svg class="h-[5vh] w-auto fill-current" viewBox="0 0 24 24">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 17c-.55 0-1-.45-1-1v-1c0-.55.45-1 1-1s1 .45 1 1v1c0 .55-.45 1-1 1zm1.07-7.75l-.9.92c-.22.22-.37.5-.43.81-.04.23-.07.49-.07.74H11v-.5c0-.55.22-1.05.59-1.41l1.2-1.2c.37-.37.59-.88.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-1.66 1.34-3 3-3s3 1.34 3 3c0 .66-.26 1.26-.68 1.75z"/>
      </svg>
    </button>

    <!-- About Pop-Up -->
    <div id="about-popup" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
      <div class="bg-base-100 rounded-lg border border-primary shadow-lg w-[60vw] max-w-[850px] p-8 relative">
        <button id="close-about-popup" class="absolute top-4 right-4 text-primary text-xl cursor-pointer">&times;</button>
        <div class="flex flex-col items-center">
          <h3 class="text-xl font-semibold text-primary text-center mb-4">What Powers DETECT?</h3>
          <ul class="flex flex-col gap-3 text-base-content text-center">
            <li>
              <a href="https://github.com/bingKegeta/DETECT" target="_blank" class="hover:text-secondary">
                DETECT is a research-driven project leveraging AI & Computer Vision. Explore our research →
              </a>
            </li>
            <li>
              <a href="https://github.com/bingKegeta/DETECT.go" target="_blank" class="hover:text-secondary">
                Powering our fast & reliable backend built with Go →
              </a>
            </li>
            <li>
              <a href="https://github.com/bingKegeta/DETECT.js" target="_blank" class="hover:text-secondary">
                Check out our responsive & interactive frontend built with JS →
              </a>
            </li>
          </ul>
        </div>
      </div>
    </div>

    <!-- Settings Button (SVG Icon) -->
    <button
      id="settings-toggle-btn"
      class="p-3 transition-transform transform-gpu hover:scale-110 cursor-pointer"
    >
      <svg
        class="h-[5vh] w-auto fill-current text-base-content hover:text-primary transition-colors duration-300"
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        viewBox="0 0 482.568 482.568"
        xml:space="preserve"
        ><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g
          id="SVGRepo_tracerCarrier"
          stroke-linecap="round"
          stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier">
          <g>
            <g>
              <path
                d="M116.993,203.218c13.4-1.8,26.8,2.8,36.3,12.3l24,24l22.7-22.6l-32.8-32.7c-5.1-5.1-5.1-13.4,0-18.5s13.4-5.1,18.5,0 l32.8,32.8l22.7-22.6l-24.1-24.1c-9.5-9.5-14.1-23-12.3-36.3c4-30.4-5.7-62.2-29-85.6c-23.8-23.8-56.4-33.4-87.3-28.8 c-4.9,0.7-6.9,6.8-3.4,10.3l30.9,30.9c14.7,14.7,14.7,38.5,0,53.1l-19,19c-14.7,14.7-38.5,14.7-53.1,0l-31-30.9 c-3.5-3.5-9.5-1.5-10.3,3.4c-4.6,30.9,5,63.5,28.8,87.3C54.793,197.518,86.593,207.218,116.993,203.218z"
              ></path>
              <path
                d="M309.193,243.918l-22.7,22.6l134.8,134.8c5.1,5.1,5.1,13.4,0,18.5s-13.4,5.1-18.5,0l-134.8-134.8l-22.7,22.6l138.9,138.9 c17.6,17.6,46.1,17.5,63.7-0.1s17.6-46.1,0.1-63.7L309.193,243.918z"
              ></path>
              <path
                d="M361.293,153.918h59.9l59.9-119.7l-29.9-29.9l-119.8,59.8v59.9l-162.8,162.3l-29.3-29.2l-118,118 c-24.6,24.6-24.6,64.4,0,89s64.4,24.6,89,0l118-118l-29.9-29.9L361.293,153.918z"
              ></path>
            </g>
          </g>
        </g></svg
      >
    </button>

    <!-- Logout Modal
    <Modal client:visible buttonText="logout" buttonClassName="text-error-content bg-error w-full rounded-lg py-2">
      <div>
        <p class="text-lg text-error-content">Are you sure?</p>
        <section class="flex flex-row">
            <button id="logout-yes" class="rounded-lg bg-error text-error-content p-2 w-full text-center">
                Yes
            </button>
        </section>
      </div>
    </Modal> -->

    <!-- Logout Button in Header -->
    <button
      id="logout-btn"
      class="transition-transform hover:scale-110 cursor-pointer text-base-content"
    >
      <svg class="h-[5vh] w-auto fill-current" viewBox="0 0 24 24">
        <path d="M16 13v-2H7V8l-5 4 5 4v-3z"></path>
        <path
          d="M20 3H9c-1.1 0-2 .9-2 2v4h2V5h11v14H9v-4H7v4c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
        ></path>
      </svg>
    </button>

    <!-- Logout Confirmation Pop-up -->
    <div
      id="logout-modal"
      class="flex fixed inset-0 items-center justify-center bg-black bg-opacity-60 backdrop-blur-md hidden z-50"
    >
      <div
        class="bg-base-200 text-content border-4 border-primary rounded-lg shadow-lg w-96 p-6 relative"
      >
        <button
          id="close-logout"
          class="absolute top-4 right-4 text-error focus:outline-none text-2xl w-8 h-8 flex items-center justify-center"
          >&times;</button
        >
        <p class="text-lg text-base-content text-center mb-4">Are you sure?</p>
        <div class="flex flex-row">
          <button
            id="logout-yes"
            class="w-full bg-error text-base-content p-2 rounded-lg text-center m-1"
            >Yes</button
          >
          <button
            id="logout-no"
            class="w-full bg-neutral hover:bg-secondary text-base-content p-2 rounded-lg text-center m-1"
            >No</button
          >
        </div>
      </div>
    </div>
  </div>

  <!-- Dim Background (Initially Hidden) -->
  <div
    id="backdrop"
    class="fixed inset-0 bg-black bg-opacity-0 transition-opacity duration-300 pointer-events-none z-40"
  >
  </div>

  <!-- Settings Menu -->
  <div
    id="settings-menu"
    class="fixed top-5 right-0 h-[95vh] w-80 bg-base-300 border-4 border-primary rounded-xl shadow-2xl backdrop-blur-md transform-gpu translate-x-full transition-transform duration-300 z-50 overflow-hidden"
  >
    <Settings />
  </div>

  <!-- JavaScript for Menu and Backdrop -->
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const menu = document.getElementById("settings-menu");
      const openBtn = document.getElementById("settings-toggle-btn");
      const closeBtn = document.getElementById("settings-close-btn");
      const backdrop = document.getElementById("backdrop");

      function openMenu() {
        if (menu) menu.classList.remove("translate-x-full"); // Slides panel into view
        if (backdrop) {
          backdrop.classList.add("pointer-events-auto");
          backdrop.classList.remove("bg-opacity-0");
          backdrop.classList.add("bg-opacity-30");
        }
      }

      function closeMenu() {
        if (menu) menu.classList.add("translate-x-full"); // Slides panel out of view
        if (backdrop) {
          backdrop.classList.remove("bg-opacity-30");
          backdrop.classList.add("bg-opacity-0");
          setTimeout(
            () => backdrop.classList.remove("pointer-events-auto"),
            300
          );
        }
      }

      if (openBtn) openBtn.addEventListener("click", openMenu);
      if (closeBtn) closeBtn.addEventListener("click", closeMenu);
      if (backdrop) backdrop.addEventListener("click", closeMenu);
    });

    document.addEventListener("DOMContentLoaded", function () {
      const aboutBtn = document.getElementById("about-btn");
      const aboutPopup = document.getElementById("about-popup");
      const closeAboutPopup = document.getElementById("close-about-popup");

      if (aboutBtn && aboutPopup && closeAboutPopup) {
        aboutBtn.addEventListener("click", () => {
          aboutPopup.classList.remove("hidden");
        });

        closeAboutPopup.addEventListener("click", () => {
          aboutPopup.classList.add("hidden");
        });

        // Optional: click outside the box to close
        aboutPopup.addEventListener("click", (event) => {
          if (event.target === aboutPopup) {
            aboutPopup.classList.add("hidden");
          }
        });
      }
    });


    import { actions } from "astro:actions";

    document.addEventListener("DOMContentLoaded", function () {
      const logoutButton = document.getElementById("logout-btn");
      const logoutModal = document.getElementById("logout-modal");
      const logoutYes = document.getElementById("logout-yes");
      const logoutNo = document.getElementById("logout-no");
      const closeLogout = document.getElementById("close-logout");

      if (logoutButton && logoutModal && logoutYes && closeLogout && logoutNo) {
        logoutButton.addEventListener("click", () => {
          logoutModal.classList.remove("hidden");
        });

        closeLogout.addEventListener("click", () => {
          logoutModal.classList.add("hidden");
        });

        logoutNo.addEventListener("click", () => {
          logoutModal.classList.add("hidden");
        });

        logoutYes.addEventListener("click", async () => {
          const formData = new FormData();
          const { error, data } = await actions.logout(formData);
          console.log(error);
          console.log(data?.message);

          if (sessionStorage.getItem("userId")) {
            sessionStorage.removeItem("userId");
          }
          if (sessionStorage.getItem("clickedID")) {
            sessionStorage.removeItem("clickedID");
          }
          if (!error && data.success) {
            window.location.href = "/";
          } else {
            console.error("Logout failed:", error || data.message);
          }
        });
      }
    });

    document.addEventListener("DOMContentLoaded", function () {
      // Previous code remains unchanged...

      // Mobile menu functionality
      const mobileMenuBtn = document.getElementById("mobile-menu-btn");
      const mobileNavMenu = document.getElementById("mobile-nav-menu");

      let mobileMenuOpen = false;

      if (mobileMenuBtn && mobileNavMenu) {
        mobileMenuBtn.addEventListener("click", (e) => {
          // Stop event propagation to prevent document click handler from firing
          e.stopPropagation();

          if (mobileMenuOpen) {
            mobileNavMenu.classList.add("-translate-y-full");
            setTimeout(() => {
              mobileNavMenu.classList.add("hidden");
            }, 300);
            mobileMenuOpen = false;
          } else {
            mobileNavMenu.classList.remove("hidden");
            // Small delay to ensure the hidden class is removed before animation
            setTimeout(() => {
              mobileNavMenu.classList.remove("-translate-y-full");
            }, 10);
            mobileMenuOpen = true;
          }
        });

        // Prevent clicks inside the mobile menu from closing it
        mobileNavMenu.addEventListener("click", (e) => {
          e.stopPropagation();
        });

        // Close mobile menu when clicking outside
        document.addEventListener("click", (e) => {
          if (mobileMenuOpen && e.target !== mobileMenuBtn) {
            mobileNavMenu.classList.add("-translate-y-full");
            setTimeout(() => {
              mobileNavMenu.classList.add("hidden");
            }, 300);
            mobileMenuOpen = false;
          }
        });
      }
    });
  </script>
</header>
