---
import Modal from "./Modal";
import Section from "./Section.astro";
import ThemeSwitcher from "./ThemeSwitcher";
import SlidingBar from "./SlidingBar.svelte";
import GraphingToggle from "./GraphingToggle.svelte";
import NormalizationToggle from "./NormalizationToggle.svelte";
import MinMaxToggle from "./MinMaxToggle.svelte";

let userSettings = {
  plotting: false,
  affine: false,
  minMax: false,
  sensitivity: 1.0,
};

---

<Section
  size="w-full h-auto flex flex-col"
  padding="p-5"
  margin="m-0"
  bg="bg-base-300"
>
  <h2 class="text-2xl font-semibold text-base-content mb-4">Settings</h2>

  <!-- Theme Switcher -->
  <div class="flex justify-between items-center bg-base-300 py-4 rounded-lg shadow-md text-base-100">
    <ThemeSwitcher client:load/>
  </div>

  <!-- Tracking & Analysis Settings -->
  <div class="flex flex-col gap-4 text-base-content">
    <NormalizationToggle client:load checked={userSettings.affine}/>
  </div>

  <div class="flex flex-col gap-4 text-base-content">
    <MinMaxToggle client:load checked={userSettings.minMax} />
  </div>

  <div class="flex flex-col gap-4 text-base-content">
    <GraphingToggle client:load checked={userSettings.plotting} />
  </div>

  <!-- Sensitivity Slider -->
  <label class="flex items-center justify-between bg-base-400 p-4 rounded-lg shadow-md text-white">
    Sensitivity
    <div class="relative w-full ml-4">
      <SlidingBar client:load value={userSettings.sensitivity} />
    </div>
  </label>

  <Modal client:visible buttonText="Logout" buttonClassName="text-error-content bg-error w-full rounded-lg py-2">
    <p class="text-lg text-error-content">Are you sure?</p>
    <section class="flex flex-row">
      <a href="/" class="rounded-lg bg-error text-error-content p-2 w-full text-center">Yes</a>
    </section>
  </Modal>

  <!-- iPhone-Style Toggle Switch Styling -->
  <style>
    .toggle-switch {
      appearance: none;
      width: 50px;
      height: 26px;
      background-color: var(--color-primary);
      border-radius: 20px;
      position: relative;
      transition: background 0.3s ease-in-out;
      cursor: pointer;
      outline: none;
    }

    .toggle-switch::before {
      content: "";
      position: absolute;
      width: 22px;
      height: 22px;
      background-color: var(--color-base-100);
      border-radius: 50%;
      top: 2px;
      left: 2px;
      transition: transform 0.3s ease-in-out;
    }

    .toggle-switch:checked {
      background-color: var(--color-success);
    }

    .toggle-switch:checked::before {
      transform: translateX(24px);
    }

    .slider-thumb::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 16px;
      height: 16px;
      background: #2563eb;
      border-radius: 50%;
      cursor: pointer;
    }
  </style>
  <script>
    const serverAddress = 'http://localhost:8080';
    let userSettings = {
      plotting: false,
      affine: false,
      minMax: false,
      sensitivity: 1.0,
    };

    async function fetchUserSettings() {
      try {
        const response = await fetch(`${serverAddress}/getUserSettings`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
        });

        if (response.ok) {
          const data = await response.json();
          userSettings.plotting = data.plotting;
          userSettings.affine = data.affine;
          userSettings.minMax = data.minMax;
          userSettings.sensitivity = data.sensitivity;
        } else {
          console.error("Failed to fetch user settings:", response.statusText);
        }
      } catch (error) {
        console.error("Error fetching user settings:", error);
      }
    }

    fetchUserSettings();
  </script>
</Section>
